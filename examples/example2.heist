'Church encoding and more

function cons(a, b)
  return function (f)
    return f(a, b)
  end function
end function

function first(pair)
  return pair(function (a, b)
    return a
  end function)
end function

function rest(pair)
  return pair(function (a, b)
    return b
  end function)
end function

function to_string(list)
  if list == nil then
    return ""
  else
    return first(list) .. " " .. to_string(rest(list))
  end if
end function

list = cons(1, cons(2, cons(3, nil)))

print to_string(list)

function isNil?(list)
  return list == nil
end function

function map(f, list)
  if isNil?(list) then
    return nil
  else
    return cons(f(first(list)), map(f, rest(list)))
  end if
end function

print to_string(map(function (x) return x * 2 end function, list))

function filter(f, list)
  if isNil?(list) then
    return nil
  else
    if f(first(list)) then
      return cons(first(list), filter(f, rest(list)))
    else
      return filter(f, rest(list))
    end if
  end if
end function

function isEven?(x)
  return x % 2 == 0
end function

print to_string(filter(isEven?, list))

function foldl(f, acc, list)
  if isNil?(list) then
    return acc
  else
    return foldl(f, f(acc, first(list)), rest(list))
  end if
end function

function sum(x, y)
  return x + y
end function

print foldl(sum, 0, list)

function range(a, b)
  if a > b then
    return nil
  else
    return cons(a, range(a + 1, b))
  end if
end function

largeList = range(1, 10)

print to_string(filter(isEven?, largeList))

function length(list)
  if isNil?(list) then
    return 0
  else
    return 1 + length(rest(list))
  end if
end function

print length(largeList)

function nth(list, n)
  if n == 0 then
    return first(list)
  else
    return nth(rest(list), n - 1)
  end if
end function

print nth(largeList, 5)


